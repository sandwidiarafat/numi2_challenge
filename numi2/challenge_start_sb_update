-- Function: public.challenge_start_sb_update(timestamp without time zone, integer)

-- DROP FUNCTION public.challenge_start_sb_update(timestamp without time zone, integer);

CREATE OR REPLACE FUNCTION public.challenge_start_sb_update(
    _datetime timestamp without time zone,
    debug_mode integer DEFAULT NULL::integer)
  RETURNS void AS
$BODY$
BEGIN

	/*
drop table if exists tmp_stg_ab_sb;
create temp table tmp_stg_ab_sb (user_id integer, attribute_name varchar(255), data_type varchar(255), data_value varchar(255), campaign_stream_steps_id integer, list_users_id integer);

-- 1.1
insert into tmp_stg_ab_sb (user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id)

select lu.user_id, css.attribute_name, css.data_type, css.data_value, css.id, lu.list_id  
from list_users_c18_sobe lu
inner join campaign_stream_steps_sobe css on datediff('day', lu.list_start_date::date, _datetime::date) + 1 between css.day_start and css.day_end and lu.campaign_id = css.campaign_id
where css.rule_type in  ('date_only','date_only_start', 'date_only_complete') and css.active = TRUE and lu.list_start_date <= _datetime::date + interval '7' day 
and lu.deleted_at is null and css.campaign_id = 1
except  select user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id  from appboy_user_events_sb;


-- 1.2
--start_date
insert into tmp_stg_ab_sb (user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id)

select lu.user_id, css.attribute_name, css.data_type, to_char(lu.list_start_date::date, 'MM /DD /YYYY') as data_value, css.id, lu.list_id  
from list_users_c18_sobe lu
inner join campaign_stream_steps_sobe css on datediff('day', lu.list_start_date::date, _datetime::date) + 1 between css.day_start and css.day_end and lu.campaign_id = css.campaign_id
where css.rule_type in  ('start_date') and css.active = TRUE and lu.list_start_date <= _datetime::date + interval '7' day   and lu.deleted_at is null and css.campaign_id = 1
except  select user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id  from appboy_user_events_sb;
*/
-- 1.3
--end_date
insert into appboy_user_events_sb (user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id)

select lu.user_id, css.attribute_name, css.data_type, to_char(lu.list_start_date::date + (css.day_in - 1 ) * INTERVAL '1 day', 'MM /DD /YYYY') as data_value, css.id, lu.list_id  
from list_users_c18_sobe lu
inner join campaign_stream_steps_sobe css on datediff('day', lu.list_start_date::date,_datetime::date) + 1 between css.day_start and css.day_end and lu.campaign_id = css.campaign_id
where css.rule_type in  ('end_date') and css.active = TRUE and lu.list_start_date <= _datetime::date + interval '28' day   and lu.deleted_at is null and css.campaign_id = 10
except  select aue.user_id, aue.attribute_name, aue.data_type, aue.data_value, aue.campaign_stream_steps_id, aue.list_users_id  from appboy_user_events_sb aue
	inner join campaign_stream_steps_sobe css on aue.campaign_stream_steps_id = css.id and campaign_id = 10;


--2.1
-- C1_T1 task count 1  days loggged food  "C18_C1_TASK_1_COUNT"  Log Food Count
insert into appboy_user_events_sb (user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id)
select usw.user_id, css.attribute_name, css.data_type, cast(sum(usw.consumed_total_items_logged) as varchar) as data_value, css.id as campaign_stream_steps_id, lu.list_id as list_users_id
-- select *
from user_stats_weekly_mon_sobe usw
inner join list_users_c18_sobe lu on lu.user_id = usw.user_id and lu.deleted_at is null and lu.campaign_id = 10 and lu.deleted_at is null
inner join campaign_stream_steps_sobe css on datediff('day', lu.list_start_date::date, _datetime::date)  between day_start and day_end 
and css.campaign_id = 10 and rule_type = 'task_count' and campaign_sequence = 17 and task_number = 1
where usw.first_day_of_week between (lu.list_start_date + interval '1 day' * css.day_start - interval '1 day' )::date and (lu.list_start_date + interval '1 day' * css.day_end  - interval '1 day' )::date 
group by usw.user_id, css.attribute_name, css.id, css.data_type,lu.list_id, lu.list_start_date
having sum(usw.consumed_total_items_logged) > 0
except  select user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id  from appboy_user_events_sb;

-- 2.2 C1-8_task 1 set all to null
-- task 1 count set to 0 for any user with no items logged  "C18_C1_TASK_1_COUNT" = 0, check for does not exist
insert into appboy_user_events_sb (user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id)

select tt.user_id, tt.attribute_name, tt.data_type, '0' as data_value, tt.campaign_stream_steps_id, tt.list_users_id from (
select lu.user_id, css.attribute_name, css.data_type,  css.id as campaign_stream_steps_id, lu.list_id as list_users_id
from list_users_c18_sobe lu
inner join campaign_stream_steps_sobe css on datediff('day', lu.list_start_date::date, _datetime::date) + 1 between css.day_start and css.day_end and css.campaign_id = 10 and rule_type = 'task_count' and task_number = 1
	-- and campaign_sequence = 1 removed campaign sequence 1/7/2018
where lu.campaign_id = 10
except  select user_id, attribute_name, data_type,  campaign_stream_steps_id, list_users_id  from appboy_user_events_sb ) tt;


/*

-- 1.4  completed challenge
insert into tmp_stg_ab_sb (user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id)

select lu.user_id, css.attribute_name, css.data_type, css.data_value, css.id, lu.list_id  
from list_users_c18_sobe lu
inner join campaign_stream_steps_sobe css on datediff('day', lu.list_start_date::date, _datetime::date)  between css.day_start and css.day_end and lu.campaign_id = css.campaign_id
where css.rule_type in  ('date_only_end') and css.active = TRUE
and lu.deleted_at is null and css.campaign_id = 1
except  select user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id  from appboy_user_events_sb where campaign_stream_steps_id = 24;

insert into appboy_user_events_sb (user_id, attribute_name, data_type, data_value, campaign_stream_steps_id, list_users_id)
select aue.user_id, aue.attribute_name, aue.data_type, aue.data_value, aue.campaign_stream_steps_id, aue.list_users_id
from tmp_stg_ab_sb  aue
inner join campaign_stream_steps_sobe css on aue.campaign_stream_steps_id = css.id
inner join css_in_ending_sobe ed on aue.list_users_id = ed.list_id and css.campaign_sequence = ed.campaign_sequence;
*/

--drop table tmp_stg_ab_sb;

IF(debug_mode = 1)
THEN
update stg_appboy_user_events_sb
set date_sent = '2020-01-01', status = 'COMPLETED'
where date_sent is null;

else

end if;

insert into challenge_run_log (function_name, created_at, updated_at)
select 'challenge_start_sb_update' as function_name, now() as created_at, now() as updated_at;


END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.challenge_start_sb_update(timestamp without time zone, integer)
  OWNER TO gfuser;
