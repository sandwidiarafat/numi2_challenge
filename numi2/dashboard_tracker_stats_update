-- Function: public.dashboard_tracker_stats_update(date, date)

-- DROP FUNCTION public.dashboard_tracker_stats_update(date, date);

CREATE OR REPLACE FUNCTION public.dashboard_tracker_stats_update(
    _start_date date,
    _end_date date)
  RETURNS void AS
$BODY$
BEGIN

create temp table if not exists temp_type_t(type character varying(255));
insert into temp_type_t(type)
values('wt_log_events'),
('food_logged'),
('new_users'),
('water_logged_events'),
('water_logged_oz'),
('activity_logged'),
('lbs_lost'),
('devices_connected');

DELETE from dashboard_tracker_stats where date >= _start_date;


insert into dashboard_tracker_stats (date, type, cnt, created_at, updated_at)

select tmp.date, tmp.type, coalesce(zz.cnt,0) as cnt, now(), now() from (
select type, td.a as date from temp_type_t dd
--select distinct(type) as type, td.a as date from dashboard_tracker_stats dd
cross join (select a::date from generate_series(_start_date::date, _end_date::date, '1day'::interval) s(a)) td ) tmp
left join
(
select aa.assigned_date, aa.type, aa.cnt, now(), now() from (
select dh.assigned_date, 'food_logged' as type, count(*) as cnt
	from diet_histories dh
	where dh.deleted_at is null and dh.assigned_date between _start_date and _end_date
	group by dh.assigned_date
union all
select ah.assigned_date, 'activity_logged' as type, count(*) as cnt
	from activity_histories ah
	where ah.assigned_date between _start_date and _end_date
	group by ah.assigned_date
union all
select w.assigned_date, 'water_logged_oz' as type, sum(ounces) as cnt
	from waters w
	where w.assigned_date between _start_date and _end_date
	group by w.assigned_date
union all
/*devices conntect*/
select ww.min_date as assigned_date, 'devices_connected' as type, count(*) as cnt  from (
select ah.user_id, min(ah.assigned_date) as min_date
	from activity_histories ah 
	where external_source is not null --and ah.assigned_date <= '2017-01-17'
	group by ah.user_id ) ww
	where  ww.min_date between _start_date and _end_date
	group by ww.min_date
union all
	select wh.created_at::date as assigned_date, 'lbs_lost' as type, sum(case when wh.previous_lbs is null then wh.current_lbs else wh.previous_lbs end - wh.current_lbs) as cnt
	from weight_histories wh where wh.created_at::date between _start_date and _end_date
	and (case when wh.previous_lbs is null then wh.current_lbs else wh.previous_lbs end - wh.current_lbs) > 0
	group by wh.created_at::date
union all
	select wh.created_at::date as assigned_date, 'wt_log_events' as type, count(*) as cnt
	from weight_histories wh where wh.created_at::date between _start_date and _end_date
	group by wh.created_at::date
union all
	select p.created_at::date as assigned_date, 'new_users' as type, count(*) as cnt
	from profiles p where p.created_at::date between _start_date and _end_date and completed = 'TRUE'
	group by p.created_at::date
union all
select w.assigned_date, 'water_logged_events' as type, count(*) as cnt
	from waters w
	where w.assigned_date between _start_date and _end_date
	group by w.assigned_date
) aa
) zz on tmp.date = zz.assigned_date and tmp.type = zz.type
order by tmp.date, tmp.type;

drop table temp_type_t;


END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.dashboard_tracker_stats_update(date, date)
  OWNER TO gfuser;
