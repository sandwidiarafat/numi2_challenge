-- Function: public.challenge_bonus_numi_update(timestamp without time zone)

-- DROP FUNCTION public.challenge_bonus_numi_update(timestamp without time zone);

CREATE OR REPLACE FUNCTION public.challenge_bonus_numi_update(_datetime timestamp without time zone)
  RETURNS void AS
$BODY$
BEGIN



truncate table css_in;

truncate table css_bonus;

insert into css_in (id, list_start_date, campaign_stream_steps_id, day_start, day_end, campaign_sequence, date_diff)
  select l.id, l.list_start_date, css.id as campaign_stream_steps_id, css.day_start, css.day_end, 
css.campaign_sequence, datediff('day', l.list_start_date::date, _datetime::date) as date_diff
from lists l
inner join campaign_stream_steps css on datediff('day', l.list_start_date::date, _datetime::date)  
between case when css.rule_type in ('date_only','date_only_start', 'date_only_complete') then day_start - 1 else day_start end and
 case when css.rule_type in ('date_only','date_only_start', 'date_only_complete') then css.day_end - 1 else day_end end and css.campaign_id = 3 and l.campaign_id = 3
 where css.attribute_name like 'C18_C%_TASK_1_COUNT'
 order by l.id, css.id;


insert into css_bonus ( user_id, api_email, list_id, task, created_at, updated_at)
select  u.id as user_id, us.api_email, lu.list_id, 'Scan_Goal' as task, now() as created_at, now() as updated_at--, cast(us.created_at as timestamp) as created_at 
from users_scan_food_summary us
inner join users_numi2 u on us.api_email = u.email
inner join list_users_c18 lu on lu.user_id = u.id
inner join css_in t on t.id = lu.list_id
where t.campaign_sequence = 4 and cast(us.created_at as date) >= lu.list_start_date::date + day_start and cast(us.created_at as date) <= lu.list_start_date::date + day_end
group by us.api_email, u.id, lu.list_id;


insert into css_bonus (user_id, cnt, list_id, task, created_at, updated_at)
select a.user_id, a.cnt, i.list_id,  'Powerfueld_Goal' as task, now() as created_at, now() as updated_at
--select *
from (select lu.user_id, lu.list_id, lu.list_start_date, t.day_start, t.day_end from  list_users_c18 lu
inner join css_in t on t.id = lu.list_id
where t.campaign_sequence = 4
) as i, get_diet_history_by_category(i.user_id, i.list_start_date::date + i.day_start - 1, i.list_start_date::date + i.day_end - 2, 'POWERFUEL') a 
where a.cnt >= 1;

insert into challenge_run_log (function_name, created_at, updated_at)
select 'challenge_bonus_numi_update' as function_name, now() as created_at, now() as updated_at;


END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.challenge_bonus_numi_update(timestamp without time zone)
  OWNER TO gfuser;
